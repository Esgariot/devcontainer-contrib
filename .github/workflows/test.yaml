name: "CI - Test Features"
on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      scenarios: ${{ steps.data.outputs.scenarios }}
    steps:
      - uses: actions/checkout@v4
      - id: data
        run: |
          echo ${{ steps.changes.outputs.changes }}
          echo "scenarios=$(make ci-test-targets)" >> $GITHUB_OUTPUT

  test:
    needs: 
      - setup
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.scenarios) }}
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            changed:
              - 'src/${{ matrix.features }}/**'
              - 'test/${{ matrix.features }}/**'

      - name: "Install latest devcontainer CLI"
        if: steps.filter.outputs.changed == 'true'
        run: npm install -g @devcontainers/cli

      - name: "Docker login ghcr"
        if: steps.filter.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: "Setup cache volume"
        if: steps.filter.outputs.changed == 'true'
        run: docker create -v feature-cache:/tmp/cache --name sync-cache alpine

      - uses: actions/cache/restore@v4
        if: steps.filter.outputs.changed == 'true'
        with:
          path: feature-cache
          key: ${{ matrix.features }}

      - name: "Sync action cache -> cache volume"
        if: steps.filter.outputs.changed == 'true'
        run: |
          install -dm777 feature-cache
          echo "cache contents:"
          ls -la -R feature-cache
          docker cp -a feature-cache/. sync-cache:/tmp/cache

      - name: "Test features scenarios"
        if: steps.filter.outputs.changed == 'true'
        run: make feature=${{ matrix.features }} test

      - name: "Sync cache volume -> action cache"
        if: steps.filter.outputs.changed == 'true'
        run: |
          docker cp -a sync-cache:/tmp/cache/. feature-cache
          echo "cache contents:"
          ls -la -R feature-cache
      - uses: actions/cache/save@v4
        if: steps.filter.outputs.changed == 'true'
        with:
          key: ${{ matrix.features }}
          path: feature-cache
